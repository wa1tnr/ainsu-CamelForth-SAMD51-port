
2740 00005080 <aart>:
2741     forth_ascii();
2742     5080:       4b00            ldr     r3, [pc, #0]    ; (5084 <aart+0x4>)
2743     5082:       4718            bx      r3
2744     5084:       00005309        .word   0x00005309
2745 
2746 00005088 <dott>:
2747     dot();
2748     5088:       4b00            ldr     r3, [pc, #0]    ; (508c <dott+0x4>)
2749     508a:       4718            bx      r3
2750     508c:       00004e15        .word   0x00004e15

4b00 means load register 3 with program counter #0
4718 means branch and execute what was loaded into register 3
5309 is the address to branch to and execute (the aart word)

Dump:
                      vvvvvvvvvvv
$00005080 00 4B 18 47 09 53 00 00  00 4B 18 47 15 4E 00 00    .K.G.S...K.G.N..
          ~~~~~ ~~~~~ ~~~~~ ~~~~~  sssss sssss sssss sssss

The 00 in '4b00' is probably that #0.  Look at other ldr instrux
to see if that pattern fits well.

The four bytes 09 53 00 00 are probably considered as one unit,
and that may mean all four bytes could be used (that the final
two 00 pairs aren't just placeholders for aligned memory addresses,
but are actively a part of the branch address -- unknown by me
as to which it might be).


ENiD,

----------------------------------------------
Branch with link, and exchange instruction set
----------------------------------------------

 ==> call  to   4798  blx r3

Rm (here, 'r3') is a register containing an address to branch to.

The BL and BLX instructions copy the address of the
next instruction into LR (R14, the link register).

The BX and BLX instructions can change the processor
state from ARM to Thumb, or from Thumb to ARM.

BX Rm and BLX Rm derive the target state from bit[0] of Rm:

    if bit[0] of Rm is 0, the processor changes to, or remains in, ARM state

    if bit[0] of Rm is 1, the processor changes to, or remains in, Thumb state.


--------
Examples
--------

example calls  to   4798  blx r3:

    116 int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
    117 {

    129     42b8:       4b05            ldr     r3, [pc, #20]   ; (42d0 <io_write+0x2c>)
    130     42ba:       4798            blx     r3


    149 int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
    150 {

    162     42e8:       4b05            ldr     r3, [pc, #20]   ; (4300 <io_read+0x2c>)
    163     42ea:       4798            blx     r3


    790 static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
    791 {

    796     4654:       4b03            ldr     r3, [pc, #12]   ; (4664 <hri_sercomusart_clear_CTRLA_ENA
    796 BLE_bit+0x14>)
    797     4656:       4798            blx     r3


   1164 uint8_t* parsed_low(void) {

   1167     47f6:       4b05            ldr     r3, [pc, #20]   ; (480c <parsed_low+0x18>)

   1175     4802:       4b04            ldr     r3, [pc, #16]   ; (4814 <parsed_low+0x20>)
   1176     4804:       4798            blx     r3


   1189 uint8_t* parsed_hi(void) {

   1204     4824:       4b03            ldr     r3, [pc, #12]   ; (4834 <parsed_hi+0x1c>)
   1205     4826:       4798            blx     r3





ENiD,

wasn't looking for this:

    ------------------------------------------------------
    190     430c:       20000000        .word   0x20000000
    ------------------------------------------------------

    180 void SystemInit(void)
    181 {
    182         // Keep the default device state after reset
    183         SystemCoreClock = __SYSTEM_CLOCK;
    184     4304:       4b01            ldr     r3, [pc, #4]    ; (430c <SystemInit+0x8>)
    185     4306:       4a02            ldr     r2, [pc, #8]    ; (4310 <SystemInit+0xc>)
    186     4308:       601a            str     r2, [r3, #0]
    187         return;
    188 }
    189     430a:       4770            bx      lr
    190     430c:       20000000        .word   0x20000000
    191     4310:       02dc6c00        .word   0x02dc6c00

ENiD,

and wasn't expecting this:

void back(void) {
    4e88:       b510            push    {r4, lr}
    pop();
    4e8a:       4c05            ldr     r4, [pc, #20]   ; (4ea0 <back+0x18>)
    4e8c:       47a0            blx     r4
    4e8e:       47a0            blx     r4
    4e90:       47a0            blx     r4
    4e92:       47a0            blx     r4


Sun Sep  2 22:04:23 UTC 2018
END.
